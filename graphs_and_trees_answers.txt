What is a binary tree and what makes it unique to other trees?
A: A binary tree is a data structure and each node has at most two nodes, while a general tree can have an infinite number of children.

What is a heuristic?
A: A guess.

What is another problem besides the shortest-path problem that requires the use of heuristics?
A: A problem finding the longest-path.

What is the difference between a depth-first search and a breadth-first search?
A: DFS searches as far along each branch before backtracking while BFS explores all neighboring nodes before moving to the next level.

Explain in your own words what an undirected, a-cyclic, unweighted graph is.
A: This graph would be one that can travel either direction to connecting nodes (undirected), nodes do not make a loop (a-cyclic), and the cost of traveling from one node to the other are not assigned (unweighted).

What kind of graph is a binary search tree?
A: A binary search tree is a directed, a-cyclic, unweighted tree where each parent can have up to two child nodes.

PROGRAMMING QUESTIONS
1)  Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.
    A: 
    class Node{
  constructor(data){
    this.data = data;
    this.right = null;
    this.left = null;
  }
}

class BinaryTree{
        constructor(){
            this.root = null;
        }

        /*addNode(node){
          let root = this.root;
          recurrsion(node){
            if(this.root === null){
              return this.root = node;
            }else if(node > root && root.right === null){
              root.right = node;
              console.log(1)
            }else if(node < root && root.left === null){
              root.left = node;
              console.log(2)
            }else if(node > root){
              root = root.right;
              this.recurrsion(node)
            }else if(node < root){
              root = root.left;
              this.recurrsion(node)
            }
          }
        }*/

        findValue(value, node){
            var itExists = "Value Exists In The Tree";
            var doesNotExist = "Value Does Not Exist In The Tree";
            if(this.root === null || node === null){
                return doesNotExist
            }else if(value === node.data){
                return itExists
            }else if(value > node.data){
                return this.findValue(value, node.right)
            }else if(value < node.data){
                return this.findValue(value, node.left)
            }
        }

        findDistanceBetween(root, node1, node2){
            let lower, higher, lowestCommonAncestor, lowerDistanceToRoot, higherDistanceToRoot, result

            if(node1 === node2){
                result = 0;
            }else if(node1 < node2){
                lower = node1;
                higher = node2;
            }else{
                lower = node2;
                higher = node1;
            }

            lowestCommonAncestor = this.findCommonAncestor(root, lower, higher);
            lowerDistanceToRoot = this.countDistance(lowestCommonAncestor, lower);
            higherDistanceToRoot = this.countDistance(lowestCommonAncestor, higher);
            result = lowerDistanceToRoot + higherDistanceToRoot;
            return result;

        }

        findCommonAncestor(root, lower, higher){
            let lowestCommonAncestor = root.data

            if(lower === lowestCommonAncestor || higher === lowestCommonAncestor){
                return lowestCommonAncestor
            }else if (lower < lowestCommonAncestor && higher > lowestCommonAncestor){
                return lowestCommonAncestor
            }else if (lower < lowestCommonAncestor && higher < lowestCommonAncestor){
                return this.findCommonAncestor(root.left, lower, higher)
            }else if (lower > lowestCommonAncestor && higher > lowestCommonAncestor){
                return this.findCommonAncestor(root.right, lower, higher)
            }
        }

        countDistance(root, node){
            let current = root; //should be the older (parent grand parent, etc) of the two nodes
            let count = 0;
            while(current){
                if(root.data === node.data){
                    return count
                }else if(node.data > root.data){
                    current = current.right
                }else if(node.data < root.data){
                    current = current.left
                }
                count++;
            }
            return count
        }
    }


    



2)  Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.
    A: Answer is written in class above.