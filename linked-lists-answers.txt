1)  What are some pros and cons of using linked lists instead of arrays?
    A: A pro is they are individually stored instead of having to store the entire linked list. Con, they must be accessed in order. 

2)  Come up with a real world example of a linked list.
    A: An album playlist if you can't click on any song you want, and instead of have to click "next" or "previous".

3, 4, 5)  The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a functional implementation of the method.
    A: 
    class LinkedList {
        constructor(){
            this.head = null;
        }

        push(element){
            let node
            node.value = element;
            node.next = null;

            if(this.head === null){
                this.head = node;
            } else {
                let current = this.head;
                while(current.next != null){
                    current = current.next
                }
                current.next = node;
            }
        }

        deleteDuplicates(){
            if(this.head === null){
                return "List is empty, no duplicates to delete"
            } else {
                let current = this.head;
                let compare = current;
                while(current.next !== null){
                    while(compare.next !== null){
                        if(current.value === compare.next.value){
                            compare.next = compare.next.next
                        }
                        compare = compare.next
                    }
                    current = current.next;
                }
            }
        }

        reverse(){
            while(currNode!=null){
                nextNode = currNode.next;
                currNode.next = prevNode;
                prevNode = currNode;
                currNode = nextNode;
            }
        }
    }


